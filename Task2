public class ContactController {
    
    @AuraEnabled
    public static List<Contact> getContacts() {
    return [SELECT Id, Name,FirstName,LastName, Phone, Email FROM Contact ];
     
    }

    @AuraEnabled
    public static void updateDetails(List<Contact> conlst){
        update conlst;
    }
 
   @AuraEnabled
    public static void deleteContact(Contact cont){
    delete  cont;
    }
    
}







<aura:component controller="ContactController" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" access="global" >

<lightning:card iconName="standard:contact" title="Contact List">
    <lightning:button label="New" onclick="{! c.handleClick }"/>

<lightning:input type="search" 
                 lable="Search" 
                 placeholder="Search from Contacts" 
                 aura:id="SearchBox"
                 onchange="{!c.searchTable}" /> 
</lightning:card>
    
      <br></br>
    
   <div class="slds-col slds-size_1-of-8 allBtn">
        <lightning:button label="Delete Selected"
                                              iconName="utility:delete"
                                              iconPosition="left"
                                              variant="brand"
                                              onclick="{!c.doDelete}">
                            </lightning:button></div>
    
    <!-- attributes -->
    <aura:attribute name="contact" type="Object"/>
    <aura:attribute name="columns" type="List"/>
    <aura:attribute name="allData" type="List" />
    
    <aura:attribute name="delIds" type="List" />
    
    <aura:attribute name="sortedBy" type="String" default="Name"/>
    <aura:attribute name="sortedDirection" type="string" default="asc" />
  
    <aura:attribute name="errors" type="Object" default="[]"/>
    <aura:attribute name="draftValues" type="Object" default="[]"/>
    
    <lightning:spinner variant="brand" size="large" aura:id="Id_spinner" class="slds-hide" />
    <!-- handlers-->
    
    <aura:handler name="init" value="{! this }" action="{! c.init }"/>
    <aura:handler event="force:refreshView" action="{! c.init}"/> 
    
    <div style="height: 300px">
        <lightning:datatable
                keyField="id"
                data="{! v.contact }"
                columns="{! v.columns }"
                hideCheckboxColumn="false"
                onrowselection="{!c.doselectedRecord}"
                onsort="{!c.updateSorting}"
                sortedBy="{!v.sortedBy}"
                sortedDirection="{!v.sortedDirection}"
                onrowaction="{!c.handleRowAction}"
                errors="{! v.errors }"
                draftValues="{! v.draftValues }"
                onsave="{!c.saveRecord}"
                />         
    </div>

</aura:component>







({
	init: function (cmp, event, helper) {
        
         var actions = [
             { label: 'Edit', name: 'edit', iconName: 'action:edit' },
             { label: 'Show details', name: 'view', iconName: 'action:preview' },
             {label:'Delete', name:'delete', iconName: 'action:delete'}];
        
        cmp.set("v.columns", [
            {label: 'Name', fieldName:"Name",sortable:true, editable:true, type:"text" },
            {label: "First Name", fieldName:"FirstName",sortable:true, editable:true, type:"text" },
            {label: "Last Name", fieldName:"LastName",sortable:true, editable:true, type:"text" },
            {label: "Phone", fieldName:"Phone",sortable:true, editable:true, type:"phone"}, 
            {label: "Email", fieldName:"Email",sortable:true, editable:true, type:"email"}, 
            { type: "action", typeAttributes: { rowActions: actions } } 
        ]);
            helper.cont(cmp, helper);
    },
    
     handleClick: function(component, event, helper) {
        var createContact = $A.get("e.force:createRecord");
        createContact.setParams({
            "entityApiName": "Contact",
            "defaultFieldValues": {
                "AccountId": component.get("v.recordId")
            }
        });
        createContact.fire();
    },
    
  /*  doselectedRecord: function(cmp,event,helper){
       // alert('record been selected');
       var selectedRows=event.getParam('selectedrRows');
       console.log('selectedRows', selectedRows);
    },*/

    updateSorting: function (cmp, event, helper) {
        var fieldName = event.getParam('fieldName');
        var sortDirection = event.getParam('sortDirection');
        cmp.set("v.sortedBy", fieldName);
        cmp.set("v.sortedDirection", sortDirection);
        helper.sortData(cmp, fieldName, sortDirection);
    },
            
           /* Search functionality */
    searchTable: function (cmp, event, helper) {
        var allRecords = cmp.get("v.allData");
        var searchFilter = event.getSource().get("v.value").toUpperCase();
        var tempArray =[];
        var i;
        for(i=0; i<allRecords.length; i++){
            if((allRecords[i].Name && allRecords[i].Name.toUpperCase().indexOf(searchFilter) != -1) 
               || 
               (allRecords[i].Phone && allRecords[i].Phone.toUpperCase().indexOf(searchFilter) != -1))
            {
                tempArray.push(allRecords[i]);
            }
        }
        cmp.set("v.contact",tempArray);
    },
    
  /*   handleRowAction: function ( cmp, event, helper ) {
       
        var selRows = event.getParam('selectedRows');
        cmp.set("v.delIds", selRows)
      
        var action = event.getParam( 'action' );
        var row = event.getParam( 'row' );
       var recId = row.Id;

        switch ( action.name ) {
            case 'edit':
                var editRecordEvent = $A.get("e.force:editRecord");
                editRecordEvent.setParams({
                    "recordId": recId
                });
                editRecordEvent.fire();
                break;
                
            case 'view':
                var viewRecordEvent = $A.get("e.force:navigateToURL");
                viewRecordEvent.setParams({
                    "url": "/" + recId
                });
                viewRecordEvent.fire();
                break;
                
            case 'delete':
             var deleteRecordEvent =$A.get("e.force:deleteRecord");
                deleteRecordEvent.setParams({
                    "recordId": recId
                });
                deleteRecordEvent.fire();
                break;             
                };      
                   }
    */
     handleRowAction: function (cmp, event, helper) {
        var action = event.getParam('action');
        var row = event.getParam('row');
        switch (action.name) {
            case 'view':
                helper.viewRecord(cmp, event);
                break;
            case 'edit':
                helper.editRecord(cmp, event);
                break;
            case 'delete':
                helper.deleteRecord(cmp, event);
                break;
        }
    },
   /* deleteSlctd : function(component,event,helper) {
        var getCheckAllId = component.find("cboxRow");
        var selctedRec = [];
        for (var i = 0; i < getCheckAllId.length; i++) {
            
            if(getCheckAllId[i].get("v.value") == true )
            {
                selctedRec.push(getCheckAllId[i].get("v.text")); 
            }
        }
        helper.deleteSelected(component,event,selctedRec);
    },*/
   
    doDelete: function (cmp, event, helper) {
    var delIdList = cmp.set("v.delIds");
    var action = cmp.get('c.delContact');
    action.setParams({lstId : delIdList});    
        action.setCallback(this, function(response){
            var state = response.getState();
            if(state === "SUCCESS") {
                $A.get('eforce:refreshView').fire();
                alert('successfully deleted');
            }
            else if (state === "ERROR"){
                var errors = response.getError();
                if(errors){
                    if(errors[0] && errors[0].message){
                        console.log("Error message: " + errors[0].message);
                    }
                }
                else {
                    console.log("Unknown error")
                }
            }
        });
        $A.enqueueAction(action);
    },

        saveRecord: function (cmp, event, helper) {
        var draftValues = event.getParam('draftValues');
        console.log(draftValues);
        var action = cmp.get("c.updateDetails");
        action.setParams({"conlst" : draftValues});
        action.setCallback(this, function(response) {
            var state = response.getState();
            $A.get('e.force:refreshView').fire();
            
        });
        $A.enqueueAction(action);
        
    },
})






({
    cont:function(cmp,event,helper){
    var action = cmp.get("c.getContacts");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if(state==="SUCCESS"){
                cmp.set("v.contact", response.getReturnValue());
                cmp.set("v.allData", response.getReturnValue());
            }
            else if (state === "ERROR") {
                var errors = response.getError();
                console.error(errors);
            }
        });
        $A.enqueueAction(action);          
    },
    
    
    sortData: function (cmp, fieldName, sortDirection) {
        var fname = fieldName;
        var data = cmp.get("v.contact");
        var reverse = sortDirection !== 'asc';
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.contact", data);
       
    },
    
    sortBy: function (field, reverse) {
        var key = function(x) {return x[field]};
        reverse = !reverse ? 1 : -1;
        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    },
    
    viewRecord : function(component, event) {
        var row = event.getParam('row');
        var recordId = row.Id;
        var navEvt = $A.get("event.force:navigateToSObject");
        navEvt.setParams({
            "recordId": recordId,
            "slideDevName": "Details"
        });
        navEvt.fire();
    },
    
    editRecord : function(component, event) {
        var row = event.getParam('row');
        var action =event.getParam('action');
        var recordId = row.Id;
        var editRecordEvent = $A.get("e.force:editRecord");
        editRecordEvent.setParams({
            "recordId": recordId,
        });
        editRecordEvent.fire();
        $A.get('e.force:refreshView').fire();
    },
    
    deleteRecord : function(component, event) {
        var action = event.getParam('action');
        var row = event.getParam('row');
        var action = component.get("c.deleteContact");
        action.setParams({
            "cont": row
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS" ) {
                var rows = component.get('v.contact');
                var rowIndex = rows.indexOf(row);
                rows.splice(rowIndex, 1);
                component.set('v.contact', rows);
            }
        });    
        $A.enqueueAction(action);
    },
    
})
